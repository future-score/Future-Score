{"version":3,"sources":["components/auth/AuthService.js","components/auth/Signup.js","components/auth/Login.js","components/contents/Contents.js","App.js","serviceWorker.js","index.js"],"names":["AuthService","_this","this","Object","classCallCheck","signup","username","password","console","log","process","service","post","then","response","data","login","loggedin","get","logout","axios","create","baseURL","concat","Signup","props","possibleConstructorReturn","getPrototypeOf","call","handleFormSubmit","event","preventDefault","state","setState","redirect","catch","error","handleChange","_event$target","target","name","value","defineProperty","_this2","react_default","a","createElement","react_router","to","className","method","id","onSubmit","type","placeholder","onChange","e","Component","Login","logged","getUser","Contents","App","userObj","loggedInUser","err","_this3","fetchUser","Fragment","exact","path","render","contents_Contents","auth_Signup","components_auth_Login","Boolean","window","location","hostname","match","ReactDOM","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ab427ebe.chunk.js","sourcesContent":["import axios from 'axios';\n\nclass AuthService {\n  constructor() {\n    this.service = axios.create({\n      baseURL: `${process.env.REACT_APP_URL}/`,\n    //   withCredentials: true\n    });\n  }\n  \n  signup = (username, password) => {\n    console.log(process.env)\n    return this.service.post('auth/signup', {username, password})\n    .then(response => response.data)\n  }\n\n  login = (username, password) => {\n    return this.service.post('auth/login', {username, password})\n    .then(response => response.data)\n  }\n\n  loggedin = () => {\n    return this.service.get('auth/currentuser',)\n    .then(response => response.data)\n  }\n\n  logout = () => {\n    return this.service.get('auth/logout',)\n    .then(response => response.data)\n  }\n}\n\nexport default AuthService;","import React, { Component } from \"react\";\nimport AuthService from \"./AuthService\";\nimport { Link, Redirect } from \"react-router-dom\";\n\n//signup y login son iguales a excepción de el html renderizado y el endpoint de nuestra API rest a la que llamamos\n//uno llama a /signup y el otro a /login usando nuestro AuthService\nclass Signup extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { username: \"\", password: \"\", redirect: false };\n    this.service = new AuthService();\n  }\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    const username = this.state.username;\n    const password = this.state.password;\n\n    //aquí llamamos al endpoint /signup de nuestra API Rest usando nuestro AuthService\n    this.service\n      .signup(username, password)\n      .then(() => {\n        this.setState({\n          username: \"\",\n          password: \"\",\n          redirect: true\n        });\n        //aquí elevamos el nuevo usuario una vez creado a App usando getUser via props\n        //por tanto, informamos a App de que el nuevo usuario ha sido creado, provocando un re-render\n        //y mostrando la parte de contenidos. Mira la función getUser de App para más info (date cuenta de que establece el state de App)\n        // this.props.getUser(response.user);\n      })\n      .catch(error => {\n        this.setState({\n          username: username,\n          password: password,\n          error: true\n        });\n      });\n  };\n\n  handleChange = event => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n\n  render() {\n    console.log(process.env)\n    if (this.state.redirect) {\n      return <Redirect to=\"/login\" />;\n    }\n    return (\n      <div className=\"signup\">\n        <div className=\"container\">\n          <div className=\"signup-content\">\n            <div className=\"signup-form\">\n              <h2 className=\"form-title\">Sign up</h2>\n              <form\n                method=\"POST\"\n                className=\"register-form\"\n                id=\"register-form\"\n                onSubmit={this.handleFormSubmit}\n              >\n                <div className=\"form-group\">\n                  <label>\n                    <i className=\"zmdi zmdi-account material-icons-name\" />\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"username\"\n                    value={this.state.username}\n                    id=\"username\"\n                    placeholder=\"Your Name\"\n                    onChange={e => this.handleChange(e)}\n                  />\n                </div>\n                {/* <div className=\"form-group\">\n                                <label><i className=\"zmdi zmdi-email\"></i></label>\n                                <input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Your Email\"/>\n                            </div> */}\n                <div className=\"form-group\">\n                  <label>\n                    <i className=\"zmdi zmdi-lock\" />\n                  </label>\n                  <input\n                    type=\"password\"\n                    name=\"password\"\n                    value={this.state.password}\n                    id=\"pass\"\n                    placeholder=\"Password\"\n                    onChange={e => this.handleChange(e)}\n                  />\n                </div>\n                <div className=\"form-group form-button\">\n                  <input\n                    type=\"submit\"\n                    name=\"signup\"\n                    id=\"signup\"\n                    className=\"form-submit\"\n                    value=\"Register\"\n                  />\n                </div>\n              </form>\n              <h1>{this.state.error ? \"Error\" : null}</h1>\n            </div>\n          </div>\n        </div>\n        <h1>{this.state.error ? \"Error\" : \"\"}</h1>\n      </div>\n\n      // <div>\n      //   <h3>Welcome!, create your account next:</h3>\n\n      //   <form onSubmit={this.handleFormSubmit}>\n      //     <fieldset>\n      //       <label>Username:</label>\n      //       <input\n      //         type=\"text\"\n      //         name=\"username\"\n      //         value={this.state.username}\n      //         onChange={e => this.handleChange(e)}\n      //       />\n      //     </fieldset>\n\n      //     <fieldset>\n      //       <label>Password:</label>\n      //       <input\n      //         type=\"password\"\n      //         name=\"password\"\n      //         value={this.state.password}\n      //         onChange={e => this.handleChange(e)}\n      //       />\n      //     </fieldset>\n\n      //     <input type=\"submit\" value=\"Sign up\" />\n      //   </form>\n\n      //   <h1>{this.state.error ? \"Error\" : \"\"}</h1>\n      // </div>\n    );\n  }\n}\n\nexport default Signup;\n","import React, { Component } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport AuthService from \"./AuthService\";\nimport \"./Login.css\"\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { username: \"\", password: \"\", logged: false };\n    this.service = new AuthService();\n  }\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    const username = this.state.username;\n    const password = this.state.password;\n\n    this.service\n      .login(username, password)\n      .then(response => {\n        this.setState({\n          username: username,\n          password: password,\n          logged: true\n        });\n\n        this.props.getUser(response);\n      })\n      .catch(error => {\n        this.setState({\n          username: username,\n          password: password,\n          error: true\n        });\n      });\n  };\n\n  handleChange = event => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n\n  render() {\n    if (this.state.logged) return <Redirect to={\"/contents\"} />;\n    return (\n      <div className=\"signup\">\n        <div className=\"container\">\n          <div className=\"signup-content\">\n            <div className=\"signup-form\">\n              <h2 className=\"form-title\">Future Score</h2>\n              <form\n                onSubmit={this.handleFormSubmit}\n                method=\"POST\"\n                className=\"register-form\"\n                id=\"register-form\"\n              >\n                <div className=\"form-group\">\n                  <label>\n                    <i className=\"zmdi zmdi-account material-icons-name\" />\n                  </label>\n                  <input\n                    type=\"text\"\n                    name=\"username\"\n                    id=\"username\"\n                    value={this.state.username}\n                    onChange={e => this.handleChange(e)}\n                    placeholder=\"Your Name\"\n                  />\n                </div>\n                {/* <div className=\"form-group\">\n                                <label><i className=\"zmdi zmdi-email\"></i></label>\n                                <input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Your Email\"/>\n                            </div> */}\n                <div className=\"form-group\">\n                  <label>\n                    <i className=\"zmdi zmdi-lock\" />\n                  </label>\n                  <input\n                    type=\"password\"\n                    name=\"password\"\n                    id=\"pass\"\n                    value={this.state.password}\n                    onChange={e => this.handleChange(e)}\n                    placeholder=\"Password\"\n                  />\n                </div>\n                <div className=\"form-group form-button\">\n                  <input\n                    type=\"submit\"\n                    name=\"login\"\n                    id=\"login\"\n                    className=\"form-submit\"\n                    value=\"Login\"\n                  />\n                </div>\n              </form>\n              <h1> {this.state.error} ? \"Error\" : \"\"</h1>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      // <div>\n      //   <form onSubmit={this.handleFormSubmit}>\n      //     <fieldset>\n      //       <label>Username:</label>\n      //       <input\n      //         type=\"text\"\n      //         name=\"username\"\n      //         value={this.state.username}\n      //         onChange={e => this.handleChange(e)}\n      //       />\n      //     </fieldset>\n\n      //     <fieldset>\n      //       <label>Password:</label>\n      //       <input\n      //         type=\"password\"\n      //         name=\"password\"\n      //         value={this.state.password}\n      //         onChange={e => this.handleChange(e)}\n      //       />\n      //     </fieldset>\n\n      //     <input type=\"submit\" value=\"Login\" />\n      //   </form>\n\n      //   <h1>{this.state.error ? \"Error\" : \"\"}</h1>\n      // </div>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\n\n//clase componente que renderiza los contenidos genéricos\n//usando rendering condicional y el componente Switch que ya conocéis podéis mostrar los contenidos oportunos que queráis\nclass Contents extends Component {\n  render() {\n    return (<div>\n\n        oedciecniuecencb\n        </div>);\n    \n  }\n}\nexport default Contents;","import React, { Component } from 'react';\nimport './App.css';\nimport { Switch, Route, Redirect } from 'react-router-dom';\n\n\nimport Signup from './components/auth/Signup';\nimport Login from './components/auth/Login';\nimport AuthService from './components/auth/AuthService';\nimport Contents from './components/contents/Contents'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = { loggedInUser: null };\n    this.service = new AuthService();\n  }\n\n  getUser = (userObj) => {\n    this.setState({\n      loggedInUser: userObj\n    })\n  }\n\n  logout = () => {\n    this.service.logout()\n      .then(() => {\n        this.setState({ loggedInUser: null });\n      })\n  }\n\n  fetchUser() {\n    if (this.state.loggedInUser === null) {\n      //utilizamos el método loggedin para cualquier momento que deseemos obtener la información del usuario quede guardada en el state de app\n      return this.service.loggedin()\n        .then(response => {\n          this.setState({\n            loggedInUser: response\n          })\n        })\n        .catch(err => {\n          this.setState({\n            loggedInUser: false\n          })\n        })\n    }\n  }\n\n  render() {\n    this.fetchUser()\n\n    if (this.state.loggedInUser) {\n      return (\n        <React.Fragment>\n          {/* <Redirect to=\"/home\"></Redirect> */}\n\n          <div className=\"App\">\n            <header className=\"App-header\">\n              {/* <Contents></Contents> */}\n              <Switch>\n                <Route exact path='/contents' render={() => <Contents getUser={this.getUser} />} />\n              </Switch>\n            </header>\n          </div>\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          {/* <Redirect to=\"/login\"></Redirect>  */}\n          <div className=\"App\">\n            <header className=\"App-header\">\n              <Switch>\n                <Route exact path='/signup' render={() => <Signup getUser={this.getUser} />} />\n                <Route exact path='/login' render={() => <Login getUser={this.getUser} />} />\n              </Switch>\n            </header>\n          </div>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()"],"sourceRoot":""}